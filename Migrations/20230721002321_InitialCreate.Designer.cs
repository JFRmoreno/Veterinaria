// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veterinaria;

#nullable disable

namespace Veterinaria.Migrations
{
    [DbContext(typeof(VetarinariaContext))]
    [Migration("20230721002321_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Veterinaria.Modelos.Address_Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Master_customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Master_customerId");

                    b.ToTable("Address_Customer", "TNXT");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Address_Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Master_supplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Master_supplierId");

                    b.ToTable("Address_Supplier", "TNXT");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_cita")
                        .HasColumnType("datetime2");

                    b.Property<int>("Master_customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsId");

                    b.HasIndex("Master_customerId");

                    b.ToTable("Date", "Master");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Doctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre_Doctor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Doctors", "Master");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Celular")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customer", "Master");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre_Producto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StoreId");

                    b.ToTable("Product", "Master");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Master_productId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_proveedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Master_productId");

                    b.ToTable("Supplier", "Master");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Payment_Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Efectivo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Metodo_tarjeta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Method", "Pyment");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Pets_customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Edad")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("Master_customerId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_Mascota")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Master_customerId");

                    b.ToTable("PetsCustomer", (string)null);
                });

            modelBuilder.Entity("Veterinaria.Modelos.Purchase_order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("Master_productId")
                        .HasColumnType("int");

                    b.Property<int>("Trade_transactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_CustomerId");

                    b.HasIndex("Master_productId");

                    b.ToTable("Purchase_order", "TNXT");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre_Punto_venta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Store", "Master");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Trade_transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Payment_MethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Payment_MethodId")
                        .IsUnique();

                    b.ToTable("Trade_transaction", "TNXT");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Address_Customer", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Master_customer", "Master_customer")
                        .WithMany("Address_Customer")
                        .HasForeignKey("Master_customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master_customer");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Address_Supplier", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Master_supplier", "Master_supplier")
                        .WithMany("Address_Supplier")
                        .HasForeignKey("Master_supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master_supplier");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Date", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Doctors", "Doctors")
                        .WithMany("Date")
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veterinaria.Modelos.Master_customer", "Master_customer")
                        .WithMany("Date")
                        .HasForeignKey("Master_customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Master_customer");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Doctors", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Store", "Store")
                        .WithMany("Doctors")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_product", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Store", "Store")
                        .WithMany("Master_product")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_supplier", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Master_product", "Master_product")
                        .WithMany("Master_supplier")
                        .HasForeignKey("Master_productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master_product");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Pets_customer", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Master_customer", "Master_customer")
                        .WithMany("Pets_customer")
                        .HasForeignKey("Master_customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master_customer");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Purchase_order", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Address_Customer", "Address_Customer")
                        .WithMany("Purchase_order")
                        .HasForeignKey("Address_CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veterinaria.Modelos.Trade_transaction", "Trade_transaction")
                        .WithMany("Purchase_Orders")
                        .HasForeignKey("Master_productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Veterinaria.Modelos.Master_product", "Master_product")
                        .WithMany("Purchase_order")
                        .HasForeignKey("Master_productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address_Customer");

                    b.Navigation("Master_product");

                    b.Navigation("Trade_transaction");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Trade_transaction", b =>
                {
                    b.HasOne("Veterinaria.Modelos.Payment_Method", "Payment_Method")
                        .WithOne("Trade_transaction")
                        .HasForeignKey("Veterinaria.Modelos.Trade_transaction", "Payment_MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment_Method");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Address_Customer", b =>
                {
                    b.Navigation("Purchase_order");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Doctors", b =>
                {
                    b.Navigation("Date");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_customer", b =>
                {
                    b.Navigation("Address_Customer");

                    b.Navigation("Date");

                    b.Navigation("Pets_customer");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_product", b =>
                {
                    b.Navigation("Master_supplier");

                    b.Navigation("Purchase_order");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Master_supplier", b =>
                {
                    b.Navigation("Address_Supplier");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Payment_Method", b =>
                {
                    b.Navigation("Trade_transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("Veterinaria.Modelos.Store", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Master_product");
                });

            modelBuilder.Entity("Veterinaria.Modelos.Trade_transaction", b =>
                {
                    b.Navigation("Purchase_Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
